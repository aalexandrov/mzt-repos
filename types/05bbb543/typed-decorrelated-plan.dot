digraph G {
    node0 [shape = record, label="Let l0 =\l Constant ()\l  types = ()\l  keys = (())\l"]
    node1 [shape = record, label=" Get types.public.u (u129)\l  types = (integer?, integer)\l  keys = ()\l"]
    node2 [shape = record, label=" Join %0 %1\l  implementation = Unimplemented\l  types = (integer?, integer)\l  keys = ()\l Filter (#0 \> 0)\l  types = (integer, integer)\l  keys = ()\l Project (#0, #1)\l  types = (integer, integer)\l  keys = ()\l Map #0, #1, (#0 + #1), (#0 - #1)\l  types = (integer, integer, integer, integer, integer, integer)\l  keys = ()\l Project (#2..=#5)\l  types = (integer, integer, integer, integer)\l  keys = ()\l Map #0, #1, #2, #3, coalesce(#2, #3, #0)\l  types = (integer, integer, integer, integer, integer, integer, integer, integer, integer?)\l  keys = ()\l Project (#4..=#8)\l  types = (integer, integer, integer, integer, integer?)\l  keys = ()\l"]
    node0 -> node2 [label = "%0\l"]
    node1 -> node2 [label = "%1\l"]
}
